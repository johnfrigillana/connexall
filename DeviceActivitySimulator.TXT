
uses
    SysUtils,
    Classes;

const

    codes = [1,  //   1 = user saw message and terminated ("done")
             2,  //   2 = user saw message and chose to call audio dn
             3,  //   3 = user saw message and chose to escalate it
             4,  //   4 = user responded to notification but has not chosen an option yet ("user aware")
             5,  //   5 = user chose a custom menu option
             6,  //  6 = user saw message and chose to cancel it
             1000]; // 1000 = user did not respond at all

    prob = [14.3,  //  Probability that user saw message and terminated ("done")
            14.3,  //  Probability that user saw message and chose to call audio dn
            14.3,  //  Probability that user saw message and chose to escalate it
            14.3,  //  Probability that user responded to notification but has not chosen an option yet ("user aware")
            14.3,  //  Probability that user chose a custom menu option
            14.3,   //  Probability that user saw message and chose to cancel it
            14.2]; //   Probability that did not respond at all
    sizeOfList = 7;


    // 1. Priority 0 ~ 10: 50% +- 10% ACK;
    // 2. Priority 11 ~ 20: 40% +- 10% ACK;
    // 3. Priority 21 ~ 30: 30% +- 10% ACK;
    // 4. Priority 31 ~ 40: 20% +- 10% ACK;
    // 5. Priority 41 ~ 50: 10% +- 5% ACK;
    // 6. Priority 51 ~ 60: 5% +- 3% ACK;
    // 7. Priority 61 ~ 70: 2% +- 1% ACK;
    // 8. Priority 71 ~ 80: 1% +- 0.5% ACK;
    // 9. Priority 81 ~ 999: 0.5% +- 0.3% ACK

    // format: [min, max]
    Prob1 = [0.4, 0.6];
    Prob2 = [0.3, 0.5];
    Prob3 = [0.2, 0.4];
    Prob4 = [0.1, 0.3];
    Prob5 = [0.05, 0.15];
    Prob6 = [0.02, 0.08];
    Prob7 = [0.01, 0.03];
    Prob8 = [0.005, 0.015];
    Prob9 = [0.002, 0.008];

    Probability_list = [Prob1, Prob2, Prob3, Prob4, Prob5,
                        Prob6, Prob7, Prob8, Prob9]

//test line
var
    devId,          
    devType,
    devLabel;
    cumulativeProb,
    devAction;

    //add for two lists
    EventListActive;
    CPListActive;


// return Priority number based on:
// 1 --> Priority 0 ~ 10
// 2 --> Priority 11 ~ 20
// 3 --> Priority 21 ~ 30
// 4 --> Priority 31 ~ 40
// 5 --> Priority 41 ~ 50
// 6 --> Priority 51 ~ 60
// 7 --> Priority 61 ~ 70
// 8 --> Priority 71 ~ 80
// 9 --> Priority 81 ~ 999
function get_priority(Priority:Integer):Integer;
begin
    if (Priority > 80) then
        begin
            Result := 9;
            //Exit(9);
        end;

    else if (Priority mod 10) = 0 then
        begin
        //the number is 0, 10, 20, 30...
            if (Priority = 0) then
                begin
                    Result := 1;
                    //Exit(1);
                end
            else
                begin
                    //Exit(Priority div 10);
                    Result := Priority div 10;
                end;
        end
    else  
        begin
            if (Priority < 10) then
                begin
                    //
                    //writeln('Hello, worrld!');
                    Result := 1;
                    //Exit(1)
                end
            else
                begin
                    //Exit((Priority div 10) + 1);
                    Result := (Priority div 10) + 1;
                end;
        end;
end;




// input current Callpoint Status, return Device Activity base on algorithm

// things to consider:
// 1. If CP Level = 3, you cannot escalate it anymore
// 2. You cannot cancel Code Blue without ACK ( or any alarm with Priority 0~ 10)
// 3. since we have this function run every second, or 1~5 seconds, we
//    need a large probably set as "Do Nothing" so we can make a delay


// For now, Probailities set as:
// ( the following prob is actually pretty high, the lowest priority (0.2% ack) will be more
//   likely to acked in 2 minutes), because the probabilities are applied each second

// 1. Priority 0 ~ 10: 50% +- 10% ACK;
// 2. Priority 11 ~ 20: 40% +- 10% ACK;
// 3. Priority 21 ~ 30: 30% +- 10% ACK;
// 4. Priority 31 ~ 40: 20% +- 10% ACK;
// 5. Priority 41 ~ 50: 10% +- 5% ACK;
// 6. Priority 51 ~ 60: 5% +- 3% ACK;
// 7. Priority 61 ~ 70: 2% +- 1% ACK;
// 8. Priority 71 ~ 80: 1% +- 0.5% ACK;
// 9. Priority 81 ~ 999: 0.5% +- 0.3% ACK
function get_DevActivity(CpInfo: String):Integer;
var Priority:integer;
var Ack_min: integer;
var Ack_max: integer;
var Random_AckProb: integer;
var Not_AckProb:integer;
begin

    // get Cp Priority
    Priority := get_priority(Command.GetRxDataParamInteger ('[PRIORITY=', CpInfo, 0));

    // get the max and min probability of ack
    Ack_min := Probability_list[Priority - 1][0]; // we use Priority - 1 for the index
    Ack_max := Probability_list[Priority - 1][1];

    // get the probability of ack and not ack
    Random_AckProb := Command.GetRandomInteger(Ack_min * 100, Ack_max * 100);
    Not_AckProb := 100 - Random_AckProb;

    //apply the above probability, determine if we ack this callpoint or not..
    Random_number := Command.GetRandomInteger(0, 100);
    if Random_number < Random_AckProb then
        begin
        Result := 1;
        end;
    else
        begin
        // Callpoint will not ack at this time, apply other device activities
        // apply 50% of do nothing
        Random_number := Command.GetRandomInteger(0, 100);
        if Random_number <= 50 then
            begin
            Result := 1000; // do nothing
            end;
        else
            begin
            Result := Command.GetRandomInteger(2, 7); // since this might means 2 - 6 (inclusive)
            end;
        end;

end;



procedure addProbability;
begin
    cumProbTemp := 0.0;
    arraySize := sizeOfList - 1;
    for loopCount := 0 to arraySize do
    begin
       cumProbTemp := cumProbTemp + prob[loopCount];
       cumulativeProb[loopCount] := cumProbTemp;
      // Command.SendToLog(FloatToStr(cumulativeProb[loopCount]));
    end;
end;

function countIf(number : Integer): Integer;
begin
    tempAns := 0;
    arraySize := sizeOfList - 1;
    for loopCount := 0 to arraySize do
    begin
       if cumulativeProb[loopCount] <= number then
       begin
           tempAns := tempAns + 1
       end;
    end;
    Result:= tempAns;
end;

function HandleNewPacket (RxData);
begin
  //Implement code to parse/process incoming data from host system.

  Command.SendToLog ('Got raw data: ' + RxData);
end;



procedure InitializeScript;
begin
  //Implement any required initialization code here that should be executed when the script is first run.
  //Example: preset variables, start the timer, etc.

  //CPCancelDuration := GetRandomInteger(Min, Max);

  //init CP list holds all actived Callpoints
  CPListActive := TStringList.Create;

  // init Event holds all actived Events
  EventListActive := TStringList.Create;

  Command.EnableTimer(1000);

end;



procedure MyScript;

var selected_event: string;
var loop: integer;
var current_code: integer;

begin
    for loop := 0 to CPListActive.count do
        begin
            // apply probability function
            current_code := get_DevActivity(CPListActive.Strings[loop]);
            Command.SendToLog(current_code);
            if current_code < 999 then   // since 1000 is do nothing
            begin
                Command.SendDevNotifyStatusToServer(EventListActive.Strings[loop],
                devId, devType, devLabel, current_code, '');
            end;

        end;

end;




procedure FinalizeScript;
begin
  //Implement any required finalization code here that should be executed when the script stops running.
  //Example: clean memory, free objects, etc.
end;



// helper function; check if given string is in the
function check_contains(Text:String; List: TStringList):integer;
var check_int:integer;
begin
    check_int := List.IndexOf(Text);
    //Command.SendToLog(check_int);
    Result := check_int;
end;




function HandleDevNotify (ExtractedNativeDevID, EvtType, EventID, DevInfo, CpInfo, BinaryType, BinaryInfo, BinaryData);
var Index;
begin
    Result := True;
    //Command.SendToLog (Format ('Received callpoint notify event. EvtType:%s / EventID:%s / DevInfo:%s / CpInfo:%s',
        //[EvtType, EventID, DevInfo, CpInfo]));

    // keep updating my device infos (do i need to do this?)
    devId := Command.GetRxDataParamInteger ('[DEV_ID=', DevInfo, 0);
    devType := Command.GetRxDataParamInteger ('[TYPE=', DevInfo, 0);
    devLabel := Command.GetRxDataParamString ('[LABEL=', DevInfo, '<DEV LABEL NOT FOUND>');

    CPLevel := Command.GetRxDataParamInteger ('[LEVEL=', CpInfo, 0);
    CPOptions := Command.GetRxDataParamString ('[OPTIONS=', CpInfo, 0);

    // if an event is a trigger:
    //Command.SendToLog('Received Event Type ' + EvtType);
    //Command.SendToLog(check_contains(EventID, EventListActive));
    if EvtType = 'ACTIVE' then
        begin
            //Command.SendToLog('Received Active Event type');
            if check_contains(EventID, EventListActive) = -1 then
                begin
                Command.SendToLog('Append!');
                CPListActive.Append(CpInfo);
                EventListActive.Append(EventID);
                end;
            else
                begin
                    // if found in the list, update callpoint information
                    //Command.SendToLog('update');
                    CPListActive.Strings[EventListActive.Indexof(EventID)] := CpInfo;
                    EventListActive.Strings[EventListActive.Indexof(EventID)] := EventID;
                end;
        end;

    // or if an event is a cancel
    else if EvtType = 'CANCEL' then
        begin
            //Command.SendToLog('Received Cancel Event type');
            //Command.SendToLog(check_contains(EventID, EventListActive));
            if check_contains(EventID, EventListActive) > -1 then
                begin
                //Command.SendToLog('Cancel!');
                CPListActive.Delete(check_contains(EventID, EventListActive));
                EventListActive.Delete(check_contains(EventID, EventListActive));

                end;
        end;
    //Command.SendToLog(EventListActive.Text);
    //Command.SendToLog(CPListActive.Text);
end;





procedure TimerEvent;
begin
  //Implement code that must be called on a regular basis (for state machines, etc.)
  //Note: refer to Command.EnableTimer, Command.DisableTimer and Command.RunWhileHostOffline procedures to enable/disable timer events.
  MyScript();

end;




